# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: License check

on:
  push:
    branches: 
      - 'master'
  pull_request:
    branches: 
     - 'master'
  issue_comment:
    types: [created]
    
jobs:
#  call-mvn-license-check:
#    uses: eclipse/dash-licenses/.github/workflows/mavenLicenseCheck.yml@master
#    with:
#      projectId: tools.wildwebdeveloper
#    secrets:
#      gitlabAPIToken: ${{ secrets.GITLAB_API_TOKEN }}
  npm-check:
    if: github.event_name != 'issue_comment' || ( github.event.issue.pull_request != '' && (github.event.comment.body == '/request-license-review') )
    # Run on all non-comment events specified by the calling workflow and for comments on PRs that have a corresponding body.
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Get Dash license tool
      run: mvn -U dependency:get -Dartifact=org.eclipse.dash:org.eclipse.dash.licenses:0.0.1-SNAPSHOT  -DremoteRepositories="https://repo.eclipse.org/content/repositories/dash-licenses-snapshots"
    - name: Set request review parameters
      if: github.event_name == 'issue_comment'
      run: |
        echo "request-review=1" >> $GITHUB_ENV
      # Run only for comments on PRs that have a corresponding body.
    - name: Run check
      run: |
        projectId="tools.wildwebdeveloper"
        gitlabAPIToken="false-token"

        exitStatus=0
        mkdir -p target/dash

        dashLicenseToolJar=$(ls ~/.m2/repository/org/eclipse/dash/org.eclipse.dash.licenses/0.0.1-SNAPSHOT/org.eclipse.dash.licenses-*.jar | tail -n 1)
        echo "Dash License Tool: ${dashLicenseTool}"
        npmCommonArgs=" --no-bin-links --ignore-scripts"
        dashCommonArgs="-excludeSources local -summary target/dash/npm-deps-summary"
        
        mkdir -p target/dash # Make directory for dash-license review summary 

        dashArgs="${dashCommonArgs}"
        if [ ${{ env.request-review }} ]; then 
          dashArgs="$dashCommonArgs -review -project $projectId -token $gitlabAPIToken" # Add "-project <Project Name> -token <Token>" here when a review is required
          echo "RUNNING WITH REQUEST REVIEW: ${dashArgs}"
        else
          echo "RUNNING ONLY CHECK: ${dashArgs}"         
        fi

        for p in $(find */ -print | grep -wv node_modules | grep -wv target | grep package.json)
        do 
          echo "Working $p filename ..."
          projectPath="${p%%/package.json*}"
          echo "Project path: ${projectPath}"
          projectName="${projectPath##*/}"        # remove longest prefix `*/`
          echo "Project name: ${projectName}"

          echo "Installing: ${projectPath}/${projectName}/package-lock.json"
          echo "Processing: npm install ${npmCommonArgs} ${projectName} --prefix ${projectPath}"
          npm install $npmCommonArgs $projectName --prefix $projectPath

          echo "Verifying: ${projectPath}/package-lock.json"
          echo "java -jar ${dashLicenseToolJar} ${dashArgs} ${projectPath}/package-lock.json"
          java -jar ${dashLicenseToolJar} ${dashArgs} ${projectPath}/package-lock.json
          if [[ $? != 0 ]]; then
            exitStatus=$? # Save for future
          fi
          echo ""
        done

        if [ ${{ env.request-review }} ]; then 
          if [[ $exitStatus == 0 ]]; then # All licenses are vetted
            echo "::set-output name=build-succeeded::$(echo 1)"
            echo "All licenses are vetted"
          else
            echo "::set-output name=build-succeeded::$(echo 0)"
            echo "Some contents requires a review"
          fi
        else
          if [[ $? != 0 ]]; then
            echo "Committers can request a review by commenting '/request-license-review'"
            exit 1
          fi
        fi
