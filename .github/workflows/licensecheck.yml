# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: License check

on:
  push:
    branches: 
      - 'master'
  pull_request:
    branches: 
     - 'master'
  issue_comment:
    types: [created]
    
jobs:
#  call-mvn-license-check:
#    uses: eclipse/dash-licenses/.github/workflows/mavenLicenseCheck.yml@master
#    with:
#      projectId: tools.wildwebdeveloper
#    secrets:
#      gitlabAPIToken: ${{ secrets.GITLAB_API_TOKEN }}
  npm-check:
    if: github.event_name != 'issue_comment' || ( github.event.issue.pull_request != '' && (github.event.comment.body == '/request-license-review') )
    # Run on all non-comment events specified by the calling workflow and for comments on PRs that have a corresponding body.
    runs-on: ubuntu-latest
    steps:
    - name: Test Variables
      run: |

        echo "github.ref: ${{ github.ref }}"
        echo "github.ref_name: ${{ github.ref_name }}"
        echo "github.ref_type: ${{ github.ref_type }}"

        echo "github.event_name: ${{ github.event_name }}"

        echo "github.event: ${{ github.event }}"
        echo "github.event.issue: ${{ github.event.issue }}"
        echo "github.event.issue.id: ${{ github.event.issue.id }}"
        echo "github.event.issue.number: ${{ github.event.issue.number }}"

        echo "github.event.pull_request: ${{ github.event.issue.pull_request }}"
        echo "github.event.pull_request.id: ${{ github.event.pull_request.id }}"
        echo "github.event.pull_request.merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}"
        echo "github.event.pull_request.head.ref: ${{ github.event.pull_request.head.ref }}"
        echo "github.event.pull_request.head.sha: ${{ github.event.pull_request.head.sha }}"
        
        echo "github.event.issue.pull_request: ${{ github.event.issue.pull_request }}"
        echo "github.event.issue.pull_request.id: ${{ github.event.issue.pull_request.id }}"
        echo "github.event.issue.pull_request.merge_commit_sha: ${{ github.event.issue.pull_request.merge_commit_sha }}"
        echo "github.event.issue.pull_request.head.ref: ${{ github.event.issue.pull_request.head.ref }}"
        echo "github.event.issue.pull_request.head.sha: ${{ github.event.issue.pull_request.head.sha }}"

        echo "github.event.comment.body: ${{ github.event.comment.body }}"

    - uses: actions/checkout@v3
      if: github.event_name == 'push' || github.event_name == 'pull_request'   
    - uses: actions/github-script@v3
      if: github.event_name == 'issue_comment' 
      id: get-pr
      with:
        script: |
          const request = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          }
          core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
          try {
            const result = await github.pulls.get(request)
            return result.data
          } catch (err) {
            core.setFailed(`Request failed with error ${err}`)
          }
    - uses: actions/checkout@v3
      if: github.event_name == 'issue_comment' 
      with:
        repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
        ref: ${{ fromJSON(steps.get-pr.outputs.result).head.sha }} # or .head.ref for branch name
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Get Dash license tool
      run: mvn -U dependency:get -Dartifact=org.eclipse.dash:org.eclipse.dash.licenses:0.0.1-SNAPSHOT  -DremoteRepositories="https://repo.eclipse.org/content/repositories/dash-licenses-snapshots"
    - name: Set request review parameters
      if: github.event_name == 'issue_comment'
      run: |
        echo "request-review=1" >> $GITHUB_ENV
      # Run only for comments on PRs that have a corresponding body.
    - name: Run check
      run: |
        projectId="tools.wildwebdeveloper"
        gitlabAPIToken="false-token"

        exitStatus=0
        mkdir -p target/dash

        dashLicenseToolJar=$(ls ~/.m2/repository/org/eclipse/dash/org.eclipse.dash.licenses/0.0.1-SNAPSHOT/org.eclipse.dash.licenses-*.jar | tail -n 1)
        echo "Dash License Tool: $dashLicenseTool"
        npmCommonArgs=" --no-bin-links --ignore-scripts"
        dashCommonArgs="-excludeSources local -summary target/dash/npm-deps-summary"
        
        mkdir -p target/dash # Make directory for dash-license review summary 

        dashArgs="$dashCommonArgs"
        if [ ${{ env.request-review }} ]; then 
          dashArgs="$dashCommonArgs -review -project $projectId -token $gitlabAPIToken" # Add "-project <Project Name> -token <Token>" here when a review is required
          echo "RUNNING WITH REQUEST REVIEW: $dashArgs"
        else
          echo "RUNNING ONLY CHECK: $dashArgs"
        fi

        for p in $(find */ -print | grep -wv node_modules | grep -wv target | grep package.json)
        do 
          projectPath="${p%%/package.json*}"      # remove prefix '/package.json'
          projectName="${projectPath##*/}"        # remove longest prefix `*/`
          
          echo ""
          echo "------ Checking project [$projectPath] ------"
          echo "Project path: ${projectPath}"
          echo "Project name: $projectName"

          echo "Installing: $projectPath/$projectName/package-lock.json"
          echo "Executing: npm install $npmCommonArgs $projectName --prefix $projectPath"
          npm install $npmCommonArgs $projectName --prefix $projectPath

          echo "Verifying: $projectPath/package-lock.json"
          echo "Ececuting: java -jar $dashLicenseToolJar $dashArgs $projectPath/package-lock.json"
          java -jar $dashLicenseToolJar $dashArgs $projectPath/package-lock.json
          if [[ $? != 0 ]]; then
            exitStatus=$? # Save for future
          fi
        done

        if [ ${{ env.request-review }} ]; then 
          echo ""
          if [[ $exitStatus == 0 ]]; then # All licenses are vetted
            echo "::set-output name=build-succeeded::$(echo 1)"
            echo "All licenses are vetted"
          else
            echo "::set-output name=build-succeeded::$(echo 0)"
            echo "Some contents requires a review"
          fi
        else
          if [[ $exitStatus != 0 ]]; then
            echo ""
            echo "Committers can request a review by commenting '/request-license-review'"
            exit 1
          fi
        fi
