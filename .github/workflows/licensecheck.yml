# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: License check

on:
  push:
    branches: 
      - 'master'
  pull_request:
    branches: 
     - 'master'
  issue_comment:
    types: [created]
    
jobs:
#  call-mvn-license-check:
#    uses: eclipse/dash-licenses/.github/workflows/mavenLicenseCheck.yml@master
#    with:
#      projectId: tools.wildwebdeveloper
#    secrets:
#      gitlabAPIToken: ${{ secrets.GITLAB_API_TOKEN }}
  npm-check:
    if: github.event_name != 'issue_comment' || ( github.event.issue.pull_request != '' && (github.event.comment.body == '/request-license-review') )
    # Run on all non-comment events specified by the calling workflow and for comments on PRs that have a corresponding body.
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Get Dash license tool
      run: mvn -U dependency:get -Dartifact=org.eclipse.dash:org.eclipse.dash.licenses:0.0.1-SNAPSHOT  -DremoteRepositories="https://repo.eclipse.org/content/repositories/dash-licenses-snapshots"
    - name: Set common parameters
      run: |
        requestReview=false
        dashArgs="common"
        echo parameters set requestReview: ${requestReview} 
        echo parameters set dashArgs: ${dashArgs} 
        echo "request-review=1" >> $GITHUB_ENV
    - name: Set request parameters
      if: github.event_name == 'issue_comment'
      run: |
        requestReview=true
        dashArgs="${dashArgs} request review"
        echo parameters set requestReview: ${requestReview} 
        echo parameters set dashArgs: ${dashArgs} 
      # Run only for comments on PRs that have a corresponding body.
    - name: Run check
      run: |
        dashArgs="common"
        if [ ${{ env.request-review }} ]; then 
          echo RUNNING WITH REQUEST REVIEW: ${dashArgs} 
          dashArgs="${dashArgs} request review"
          requestReview=true
        else
          echo RUNNING ONLY CHECK: ${dashArgs}
          requestReview=false
        fi

        echo Using dashArgs: ${dashArgs} 

        if [ $requestReview == true ]; then
          echo RUNNING WITH REQUEST REVIEW: ${dashArgs} 
          if [[ $? == 0 ]]; then # All licenses are vetted
            echo "::set-output name=build-succeeded::$(echo 1)"
          else
            echo "::set-output name=build-succeeded::$(echo 0)"
          fi
        else
          echo RUNNING ONLY CHECK: ${dashArgs}
          if [[ $? != 0 ]]; then
            echo "Committers can request a review by commenting '/request-license-review'"
            exit 1
          fi
        fi
    - name: Prepare ESLint NPM deps
      run: npm install --no-bin-links --ignore-scripts  eslint --prefix eslint
    - name: License check ESLint NPM deps
      run: java -jar $(ls ~/.m2/repository/org/eclipse/dash/org.eclipse.dash.licenses/0.0.1-SNAPSHOT/org.eclipse.dash.licenses-*.jar | tail -n 1) eslint/package-lock.json -excludeSources local
    - name: Prepare Angular-App NPM deps
      run: npm install --no-bin-links --ignore-scripts  angular-app  --prefix angular-app
    - name: License check Angular-App NPM deps
      run: java -jar $(ls ~/.m2/repository/org/eclipse/dash/org.eclipse.dash.licenses/0.0.1-SNAPSHOT/org.eclipse.dash.licenses-*.jar | tail -n 1) angular-app/package-lock.json -excludeSources local
