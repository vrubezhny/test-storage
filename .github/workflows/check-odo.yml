name: check-odo

on:
  schedule:
    - cron: "0 8 * * *"
  workflow_dispatch:
jobs:
  check-odo-repo:
    runs-on: ubuntu-latest
    env:
        TOOL_REPO: redhat-developer/odo
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check Out Code
        uses: actions/checkout@v4
      - name: Get latest ODO nightly build version
        run: |
          echo "REPO_ODO_VERSION=$(cat src/tools.json | jq -r .odo.version)" >> $GITHUB_ENV
          LATEST_TOOL_RELEASE_RESP=$(gh release --repo ${{ env.TOOL_REPO }} view --json tagName)
          latestReleaseTag="$(echo ${LATEST_TOOL_RELEASE_RESP} | jq -r .tagName)"
          echo "LATEST_TOOL_RELEASE_TAG=${latestReleaseTag}" >> $GITHUB_ENV
          echo "LATEST_TOOL_RELEASE_VERSION=$(echo ${latestReleaseTag} | sed 's|v||')" >> $GITHUB_ENV
          commitId="$(git ls-remote --refs --heads https://github.com/${{ env.TOOL_REPO }} refs/heads/main 2>/dev/null | cut -c1-9 2>/dev/null)"
          echo "LATEST_TOOL_COMMIT_ID=${commitId}" >> $GITHUB_ENV
          echo "LATEST_TOOL_NIGHTLY_BUILD=${commitId}-nightly" >> $GITHUB_ENV
      - name: Find existing PR for ODO version
        run: |
          latestReleaseVersionString="${{ env.LATEST_TOOL_RELEASE_VERSION }} (${{ env.LATEST_TOOL_NIGHTLY_BUILD }})"
          echo "LATEST_TOOL_RELEASE_VERSION_STRING=${latestReleaseVersionString}" >> $GITHUB_ENV
          echo PR_EXISTS=$(gh pr --repo ${{ github.repository }} list --state open --search "update odo cli to ${latestReleaseVersionString} in:title" --json url | jq length) >> $GITHUB_ENV
      - name: Update src/tools.json with latest odo version
        if: ${{ (env.LATEST_TOOL_NIGHTLY_BUILD != '') && (env.LATEST_TOOL_RELEASE_VERSION_STRING != env.REPO_ODO_VERSION) && (env.PR_EXISTS == 0) }}
        run: |
          jq --indent 4 '.odo.version = "${{env.LATEST_TOOL_RELEASE_VERSION_STRING}}"' src/tools.json \
           | jq --indent 4 '.odo.versionRange = "${{env.LATEST_TOOL_RELEASE_VERSION_STRING}}"' \
           | jq --indent 4 '.odo.versionRangeLabel = "version == ${{env.LATEST_TOOL_RELEASE_VERSION_STRING}}"' > src/tools.json.new
          mv src/tools.json.new src/tools.json
          for platform in win32 darwin darwin-arm64 linux linux-arm64; do
            pltfrm="$platform"
            ext=".tar.gz"
            exeExt=""
            if [[ "$platform" == "win"* ]]; then
              pltfrm="windows"
              ext=".zip"
              exeExt=".exe"
            fi
            arch="-amd64"
            if [[ $platform == *"-a"* ]]; then
              arch="" # already in platform string
            fi
            old_url=`jq -r ".odo.platform[\"${platform}\"].url" src/tools.json`
            new_url="https://s3.eu-de.cloud-object-storage.appdomain.cloud/odo-nightly-builds/odo-${pltfrm}${arch}${ext}"
            checksum=`curl -s ${new_url}.sha256`
            dlFileName="odo-${pltfrm}${arch}${ext}"
            cmdFileName="odo${exeExt}"
            jq --indent 4 ".odo.platform[\"${platform}\"].url = \"${new_url}\"" src/tools.json \
             | jq --indent 4 ".odo.platform[\"${platform}\"].sha256sum = \"${checksum}\"" \
             | jq --indent 4 ".odo.platform[\"${platform}\"].dlFileName = \"${dlFileName}\"" \
             | jq --indent 4 ".odo.platform[\"${platform}\"].cmdFileName = \"${cmdFileName}\"" > src/tools.json.new > src/tools.json.new
            mv src/tools.json.new src/tools.json
          done
      - name: Create pull request
        if: ${{ (env.LATEST_TOOL_RELEASE_VERSION_STRING != '') && (env.LATEST_TOOL_RELEASE_VERSION_STRING != env.REPO_ODO_VERSION) && (env.PR_EXISTS == 0) }}
        run: |
          git config --global user.email "openshifttools-bot@users.noreply.github.com"
          git config --global user.name "openshifttools-bot"
          git checkout -b "odo-${{ env.LATEST_TOOL_NIGHTLY_BUILD }}"
          git commit -am "Update ODO CLI to ${{ env.LATEST_TOOL_RELEASE_VERSION_STRING }})"
          git push -f origin "odo-${{ env.LATEST_TOOL_NIGHTLY_BUILD }}"
          gh pr create --title "Update ODO CLI to ${{ env.LATEST_TOOL_RELEASE_VERSION_STRING }})" \
           --body "See commit history since version ${{ env.LATEST_TOOL_RELEASE_VERSION }} to ${{ env.LATEST_TOOL_RELEASE_VERSION_STRING }} at: https://github.com/redhat-developer/odo/compare/${{env.LATEST_TOOL_RELEASE_TAG}}...${{ env.LATEST_TOOL_COMMIT_ID }}"
