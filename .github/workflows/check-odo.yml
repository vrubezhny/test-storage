name: check-odo

on:
  schedule:
    - cron: "0,10,20,30,40,50 * * * *"
    # - cron: "* 8 * * *"
  workflow_dispatch:
env:
  TOOL_REPO: redhat-developer/odo
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  check-odo:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-last-commit.outputs.cache-hit }}
      last-commit-id: ${{ steps.repo-last-commit-info.outputs.repo-last-commit-id }}
      last-release-tag: ${{ steps.repo-last-commit-info.outputs.repo-last-release-tag }}
      last-release-version: ${{ steps.repo-last-commit-info.outputs.repo-last-release-version }}
      nightly-build-version: ${{ steps.repo-last-commit-info.outputs.repo-nightly-build-version }}
      should-continue: ${{ steps.repo-last-commit-info.outputs.should-continue }}
    steps:
      - name: Check/create odo-lastCommit file
        run: touch "odo-lastCommit"
      - name: Check New Changes
        id: cache-last-commit
        uses: actions/cache@v4
        with:
          path: odo-lastCommit
          key: odo-lastCommit-${{ hashFiles('odo-lastCommit') }}
      - uses: actions/checkout@v4
        with:
          repository: '${{ env.TOOL_REPO}}'
          fetch-depth: 2
          fetch-tags: false
          path: redhat-developer-odo-repository
      - name: Get Last Commit Info
        id: repo-last-commit-info
        run: |
          pushd redhat-developer-odo-repository

          # Last Commit ID (short or abbreviated to 9 characters version)
          lastCommitId="$(git describe --no-match --always --abbrev=9 --dirty --broken 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)"
          echo "repo-last-commit-id=$lastCommitId" >> $GITHUB_OUTPUT

          # Last Release Tag and Version
          lastReleaseTag=$(gh release --repo ${{ env.TOOL_REPO }} view --json tagName | jq -r .tagName)
          lastReleaseVersion="$(echo $lastReleaseTag | sed 's|v||')"
          echo "repo-last-release-tag=$lastReleaseTag" >> $GITHUB_OUTPUT
          echo "repo-last-release-version=$lastReleaseVersion" >> $GITHUB_OUTPUT

          # Nightly Build Version
          echo "repo-nightly-build-version=$lastReleaseVersion (${lastCommitId}-nightly)" >> $GITHUB_OUTPUT

          popd

          # Read lastCommit file and compare it with the current commit ID - if equal then no need to proceed with update
          cachedCommitId=0
          if [ -f "odo-lastCommit" ]; then
            echo "Read cached odo-lastCommit file: `cat 'odo-lastCommit'`"
            cachedCommitId=`cat "odo-lastCommit" 2>/dev/null`
          fi

          if [[ "$lastCommitId" == "$cachedCommitId" ]]; then
            echo "The last commit ID $lastCommitId is already processed. Skip further processing..."
            echo "should-continue=false" >> $GITHUB_OUTPUT
            echo "should-continue=false"
            exit 0
          else
            echo "The Last Commit $lastCommitId and Cached Commit ID $cachedCommitId are different. Continuing..."
          fi
          echo "should-continue=true" >> $GITHUB_OUTPUT
          echo "should-continue=true"

  check-nightly-build:
    runs-on: ubuntu-latest
    outputs:
      should-continue: ${{ steps.check-nightly-build-exists.outputs.should-continue }}
    needs: check-odo
    if: ${{ needs.check-odo.outputs.should-continue == 'true' || github.event_name != 'schedule' }}
    steps:
      - name: Check if a Nightly Build exists for the last commit id
        id: check-nightly-build-exists
        run: |
          nightlyBuildExists=`curl -s "https://s3.eu-de.cloud-object-storage.appdomain.cloud/odo-nightly-builds/odo-linux-arm64-${{ needs.check-odo.outputs.last-commit-id }}.tar.gz.sha256" | grep -E "^[A-Za-z0-9]+$" | wc -w`
          if [[ "$nightlyBuildExists" == "0" ]]; then
            echo "The Nightly Build for commit ID ${{ needs.check-odo.outputs.last-commit-id }} doesn't exist. Skip further processing..."
            echo "should-continue=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "The Nightly Build for commit ID ${{ needs.check-odo.outputs.last-commit-id }} exists. Continuing..."
          fi
          echo "should-continue=true" >> $GITHUB_OUTPUT

  check-pr:
    runs-on: ubuntu-latest
    outputs:
      should-continue: ${{ steps.check-pr-exists.outputs.should-continue }}
    needs: check-odo
    if: ${{ needs.check-odo.outputs.should-continue == 'true' || github.event_name != 'schedule' }}
    steps:
      - name: Check if the update PR already exists
        id: check-pr-exists
        run: |
          prExists=$(gh pr --repo ${{ github.repository }} list --state all --search "update odo cli to ${{ needs.check-odo.outputs.last-release-version }} (${{ needs.check-odo.outputs.last-commit-id }}-nightly) in:title" --json url | jq length)
          if [[ "$prExists" == "1" ]]; then
            echo "The PR is already created for commit ID ${{ needs.check-odo.outputs.last-commit-id }}. Skip further processing..."
            echo "should-continue=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "The PR is not yet created for commit ID ${{ needs.check-odo.outputs.last-commit-id }}. Continuing..."
          fi
          echo "should-continue=true" >> $GITHUB_OUTPUT

  status:
    runs-on: ubuntu-latest
    outputs:
      should-continue: ${{ steps.test.outputs.should-continue }}
    needs: [check-odo, check-nightly-build, check-pr]
    steps:
      - name: Check the status
        id: test
        run: |
          if [[ '${{ needs.check-odo.outputs.should-continue }}' != 'true' ||
              '${{ needs.check-nightly-build.outputs.should-continue }}' != 'true' ||
              '${{ needs.check-pr.outputs.should-continue }}' != 'true' ]]; then
             echo "should-continue=false" >> $GITHUB_OUTPUT
          else
            echo "should-continue=true" >> $GITHUB_OUTPUT
          fi


  print-checks:
    runs-on: ubuntu-latest
    needs: [check-odo, check-nightly-build, check-pr, status]
    steps:
      - name: Print results of check-odo and check-pr
        run: |
          echo "event_name: ${{github.event_name}}"
          echo "should-continue:  ${{needs.status.outputs.should-continue}}"

          echo "cache-hit:  ${{needs.check-odo.outputs.cache-hit}}"
          echo "last-commit-id: ${{ needs.check-odo.outputs.last-commit-id }}"
          echo "last-release-tag: ${{ needs.check-odo.outputs.last-release-tag }}"
          echo "last-release-version: ${{ needs.check-odo.outputs.last-release-version }}"
          echo "nightly-build-version: ${{ needs.check-odo.outputs.nightly-build-version }}"

          # echo "cache-hit:  ${{needs.check-pr.outputs.pr-exists}}"

  update-odo:
    runs-on: ubuntu-latest
    needs: [check-odo, status]
    # if: ${{ (needs.status.outputs.should-continue == 'true' || github.event_name != 'schedule') && needs.check-nightly-build.outputs.nightly-build-exists == 1 && needs.check-pr.outputs.pr-exists == 0 }}
    if: ${{ needs.status.outputs.should-continue == 'true' || github.event_name != 'schedule' }}
    steps:
      - name: Check Out Code
        uses: actions/checkout@v4
      - name: Update src/tools.json with latest odo version
        run: |
          jq --indent 4 '.odo.description = "ODO CLI tool"' src/tools.json \
            | jq --indent 4 '.odo.vendor = "Red Hat Developer"' \
            | jq --indent 4 '.odo.name = "odo"' \
            | jq --indent 4 '.odo.version = "${{ needs.check-odo.outputs.last-release-version }}"' \
            | jq --indent 4 '.odo.versionRange = "^${{ needs.check-odo.outputs.last-release-version }}"' \
            | jq --indent 4 '.odo.versionRangeLabel = "version >= ${{ needs.check-odo.outputs.last-release-version }}"' > src/tools.json.new
          mv src/tools.json.new src/tools.json
          for platform in win32 darwin darwin-arm64 linux linux-arm64; do
            pltfrm="$platform"
            ext=".tar.gz"
            exeExt=""
            if [[ "$platform" == "win"* ]]; then
              pltfrm="windows"
              ext=".zip"
              exeExt=".exe"
            fi
            arch="-amd64"
            if [[ $platform == *"-a"* ]]; then
              arch="" # already in platform string
            fi
            old_url=`jq -r ".odo.platform[\"${platform}\"].url" src/tools.json`
            new_url="https://s3.eu-de.cloud-object-storage.appdomain.cloud/odo-nightly-builds/odo-${pltfrm}${arch}-${{ needs.check-odo.outputs.last-commit-id }}${ext}"
            checksum=`curl -s ${new_url}.sha256`
            dlFileName="odo-${pltfrm}${arch}${ext}"
            cmdFileName="odo-${pltfrm}${arch}-${{ needs.check-odo.outputs.last-commit-id }}${exeExt}"
            jq --indent 4 ".odo.platform[\"${platform}\"].url = \"${new_url}\"" src/tools.json \
              | jq --indent 4 ".odo.platform[\"${platform}\"].sha256sum = \"${checksum}\"" \
              | jq --indent 4 ".odo.platform[\"${platform}\"].dlFileName = \"${dlFileName}\"" \
              | jq --indent 4 ".odo.platform[\"${platform}\"].cmdFileName = \"${cmdFileName}\"" > src/tools.json.new > src/tools.json.new
            mv src/tools.json.new src/tools.json
          done
      - name: Create pull request
        run: |
          git config --global user.email "openshifttools-bot@users.noreply.github.com"
          git config --global user.name "openshifttools-bot"
          git checkout -b "bump-odo-${{ needs.check-odo.outputs.last-release-version }}-${{ needs.check-odo.outputs.last-commit-id }}"
          git commit -am "Update ODO CLI to ${{ needs.check-odo.outputs.nightly-build-version }}"
          git push -f origin "bump-odo-${{ needs.check-odo.outputs.last-release-version }}-${{ needs.check-odo.outputs.last-commit-id }}"
          gh pr create --title "Update ODO CLI to ${{ needs.check-odo.outputs.nightly-build-version }}" \
            --body "See the commit history between release ${{needs.check-odo.outputs.last-release-version}} and the latest nightly version ${{ needs.check-odo.outputs.nightly-build-version }} at: https://github.com/redhat-developer/odo/compare/${{needs.check-odo.outputs.last-release-tag}}...${{ needs.check-odo.outputs.last-commit-id }}"
      - name: Update cache
        run: |
          echo "Update odo-lastCommit file with commit ID: ${{ needs.check-odo.outputs.last-commit-id }}"
          echo "${{ needs.check-odo.outputs.last-commit-id }}" >> "odo-lastCommit"
      - name: Check New Changes
        id: cache-last-commit
        uses: actions/cache@v4
        with:
          path: odo-lastCommit
          key: odo-lastCommit-${{ hashFiles('odo-lastCommit') }}
