name: check-odo

on:
  schedule:
    - cron: "0 8 * * *"
  workflow_dispatch:
jobs:
  should-check-odo:
    runs-on: ubuntu-latest
    outputs:
        repo-cache-hit: ${{ steps.cache-last-commit.outputs.cache-hit }}
        repo-last-commit-id: ${{ steps.last-commit-info.outputs.last-commit-id }}
        repo-last-commit-date: ${{ steps.last-commit-info.outputs.last-commit-date }}
        repo-last-commit-built-number: ${{ steps.last-commit-info.outputs.last-commit-build-number }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'redhat-developer/odo'
          fetch-depth: 2
          path: redhat-developer-odo-repository
      - name: Get Last Commit Info
        id: repo-last-commit-info
        run: |
          # version="$(git describe --no-match --always --abbrev=9 --dirty --broken 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)-nightly"
          # Last Commit ID
          lastCommitId="$(git rev-parse HEAD 2>/dev/null)"
          # Last Commit Committer Date/Time
          lastCommitDate="$(git log -1 --oneline --pretty=format:%cd --date=format:%Y%m%d%H%M%S ${lastCommitId} 2>/dev/null)"
          # Number of commits between the latest release and the Last Commit ID
          lastCommitBuildNumber="$(git log --oneline 3248bd4..5b5eb35 2>/dev/null | wc -l)"
          repo-last-commit-id: ${{ steps.last-commit-info.outputs.last-commit-id }}
          repo-last-commit-date: ${{ steps.last-commit-info.outputs.last-commit-date }}
          repo-last-commit-built-number: ${{ steps.last-commit-info.outputs.last-commit-build-number }}
          echo "repo-last-commit-id=$(echo $lastCommitId)" >> $GITHUB_OUTPUT
          echo "repo-last-commit-date=$(echo $lastCommitDate)" >> $GITHUB_OUTPUT
          echo "repo-last-commit-built-number=$(echo $lastCommitBuildNumber)" >> $GITHUB_OUTPUT
          echo "$lastCommitId" >> ../lastCommit
      - name: Check New Changes
        id: cache-last-commit
        uses: actions/cache@v4
        with:
          path: lastCommit
          key: lastCommit-${{ hashFiles('lastCommit') }}
  should-update-odo:
    runs-on: ubuntu-latest
    needs: should-check-odo
    if: ${{ needs.should-check-odo.outputs.repo-cache-hit != 'true' || github.event_name != 'schedule' }}
    outputs:
      odo-version-changed: ${{ !(steps.cache-last-commit.outputs.cache-hit) }}
    steps:
      - name: Test Should Update Odo?
        run: |
          echo "should-update-odo: executed!"
  check-odo-repo:
    runs-on: ubuntu-latest
    env:
        TOOL_REPO: redhat-developer/odo
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check Out Code
        uses: actions/checkout@v4
      - name: Get latest ODO nightly build version
        run: |
          echo "REPO_ODO_VERSION=$(cat src/tools.json | jq -r .odo.version)" >> $GITHUB_ENV
          LATEST_TOOL_RELEASE_RESP=$(gh release --repo ${{ env.TOOL_REPO }} view --json tagName)
          echo "LATEST_TOOL_RELEASE_TAG=$(echo ${LATEST_TOOL_RELEASE_RESP} | jq -r .tagName)" >> $GITHUB_ENV
          echo "LATEST_TOOL_RELEASE_VERSION=$(echo ${LATEST_TOOL_RELEASE_RESP} | jq -r .tagName | sed 's|v||')" >> $GITHUB_ENV
          commitId="$(git ls-remote --refs --heads https://github.com/${{ env.TOOL_REPO }} refs/heads/main 2>/dev/null | cut -c1-9 2>/dev/null)"
          echo "LATEST_TOOL_COMMIT_ID=${commitId}" >> $GITHUB_ENV
          echo "LATEST_TOOL_NIGHTLY_BUILD=${commitId}-nightly" >> $GITHUB_ENV
      - name: Find existing PR for ODO version
        run: |
          echo "LATEST_TOOL_RELEASE_VERSION_STRING=${{ env.LATEST_TOOL_RELEASE_VERSION }} (${{ env.LATEST_TOOL_NIGHTLY_BUILD }})" >> $GITHUB_ENV
          echo PR_EXISTS=$(gh pr --repo ${{ github.repository }} list --state any --search "update odo cli to ${{ env.LATEST_TOOL_RELEASE_VERSION }} (${{ env.LATEST_TOOL_NIGHTLY_BUILD }}) in:title" --json url | jq length) >> $GITHUB_ENV
      - name: Update src/tools.json with latest odo version
        if: ${{ (env.LATEST_TOOL_NIGHTLY_BUILD != '') && (env.LATEST_TOOL_RELEASE_VERSION_STRING != env.REPO_ODO_VERSION) && (env.PR_EXISTS == 0) }}
        run: |
          jq --indent 4 '.odo.version = "${{env.LATEST_TOOL_RELEASE_VERSION_STRING}}"' src/tools.json \
           | jq --indent 4 '.odo.versionRange = "${{env.LATEST_TOOL_RELEASE_VERSION_STRING}}"' \
           | jq --indent 4 '.odo.versionRangeLabel = "version == ${{env.LATEST_TOOL_RELEASE_VERSION_STRING}}"' > src/tools.json.new
          mv src/tools.json.new src/tools.json
          for platform in win32 darwin darwin-arm64 linux linux-arm64; do
            pltfrm="$platform"
            ext=".tar.gz"
            exeExt=""
            if [[ "$platform" == "win"* ]]; then
              pltfrm="windows"
              ext=".zip"
              exeExt=".exe"
            fi
            arch="-amd64"
            if [[ $platform == *"-a"* ]]; then
              arch="" # already in platform string
            fi
            old_url=`jq -r ".odo.platform[\"${platform}\"].url" src/tools.json`
            new_url="https://s3.eu-de.cloud-object-storage.appdomain.cloud/odo-nightly-builds/odo-${pltfrm}${arch}${ext}"
            checksum=`curl -s ${new_url}.sha256`
            dlFileName="odo-${pltfrm}${arch}${ext}"
            cmdFileName="odo${exeExt}"
            jq --indent 4 ".odo.platform[\"${platform}\"].url = \"${new_url}\"" src/tools.json \
             | jq --indent 4 ".odo.platform[\"${platform}\"].sha256sum = \"${checksum}\"" \
             | jq --indent 4 ".odo.platform[\"${platform}\"].dlFileName = \"${dlFileName}\"" \
             | jq --indent 4 ".odo.platform[\"${platform}\"].cmdFileName = \"${cmdFileName}\"" > src/tools.json.new > src/tools.json.new
            mv src/tools.json.new src/tools.json
          done
      - name: Create pull request
        if: ${{ (env.LATEST_TOOL_RELEASE_VERSION_STRING != '') && (env.LATEST_TOOL_RELEASE_VERSION_STRING != env.REPO_ODO_VERSION) && (env.PR_EXISTS == 0) }}
        run: |
          git config --global user.email "openshifttools-bot@users.noreply.github.com"
          git config --global user.name "openshifttools-bot"
          git checkout -b "odo-${{ env.LATEST_TOOL_NIGHTLY_BUILD }}"
          git commit -am "Update ODO CLI to ${{ env.LATEST_TOOL_RELEASE_VERSION_STRING }}"
          git push -f origin "odo-${{ env.LATEST_TOOL_NIGHTLY_BUILD }}"
          gh pr create --title "Update ODO CLI to ${{ env.LATEST_TOOL_RELEASE_VERSION_STRING }}" \
           --body "See the commit history between release ${{ env.LATEST_TOOL_RELEASE_VERSION }} and the latest nightly version ${{ env.LATEST_TOOL_RELEASE_VERSION_STRING }} at: https://github.com/redhat-developer/odo/compare/${{env.LATEST_TOOL_RELEASE_TAG}}...${{ env.LATEST_TOOL_COMMIT_ID }}"
