name: check-versions
on:
  push:
    branches: 
      - 'master'
  pull_request:
    branches: 
     - 'master'
jobs:
  check-versions:
    runs-on: ubuntu-latest
    env:
        TOOL_REPO: openshift/oc
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Clean Versions
        run: |
          # echo "TAG_VERSION=$(echo ${{env.TAG}} | tr -dc '0-9')" >> $GITHUB_ENV
          # echo "PACKAGE_VERSION=$(echo ${{env.PACKAGE}} | tr -dc '0-9')" >> $GITHUB_ENV
          echo "TAG_VERSION='2.2.2'" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=2.2.3" >> $GITHUB_ENV
          
      - name: Convert Versions to Numbers
        run: |
          echo "TAG_NUMBER=$echo$((${{env.TAG_VERSION}} - 0 ))" >> $GITHUB_ENV
          echo "PACKAGE_NUMBER=$echo$((${{env.PACKAGE_VERSION}} - 0 ))" >> $GITHUB_ENV
    
      - name: Compare Versions
        run: |
          vercomp () {
            if [[ $1 == $2 ]]
            then
              return 0
            fi
            local IFS=.
            local i ver1=($1) ver2=($2)
            # fill empty fields in ver1 with zeros
            for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
            do
              ver1[i]=0
            done
            for ((i=0; i<${#ver1[@]}; i++))
            do
              if [[ -z ${ver2[i]} ]]
              then
                # fill empty fields in ver2 with zeros
                ver2[i]=0
              elif ((10#${ver1[i]} > 10#${ver2[i]}))
              then
                return 1
              elif ((10#${ver1[i]} < 10#${ver2[i]}))
              then
                return 2
              fi
            done
            return 0
          }
          vercomp $1 $2
          case $? in
            0) op='=';;
            1) op='>';;
            2) op='<';;
          esa
          echo "'${{env.TAG_VERSION}} $op ${{env.PACKAGE_VERSION}}'"
          echo "'${{env.TAG_VERSION}} $op ${{env.PACKAGE_VERSION}}'" >> "$GITHUB_ENV"

          # elif (( ${{env.PACKAGE_NUMBER}} = ${{env.TAG_NUMBER}} )); then
          #    echo "PUSH=false; '${{env.TAG_VERSION}} $op ${{env.PACKAGE_VERSION}}'" >> "$GITHUB_ENV"
    
          # else
          #    echo "PUSH=false" >> "$GITHUB_ENV"
          #fi         


        
